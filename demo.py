#!/usr/bin/env python3
"""
Demo mode –¥–ª—è Football Betting Bot

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
–±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö API –∫–ª—é—á–µ–π.
"""

import asyncio
from datetime import datetime, timedelta
from typing import Dict, List
from analyzer import FootballAnalyzer

class MockFootballAPI:
    """–ú–æ–∫ API –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.mock_matches = [
            {
                "id": 1,
                "homeTeam": {"id": 1, "name": "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –Æ–Ω–∞–π—Ç–µ–¥", "shortName": "MUN"},
                "awayTeam": {"id": 2, "name": "–ß–µ–ª—Å–∏", "shortName": "CHE"},
                "competition": {"name": "–ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞"},
                "utcDate": (datetime.now() + timedelta(days=1)).isoformat(),
                "status": "SCHEDULED"
            },
            {
                "id": 2,
                "homeTeam": {"id": 3, "name": "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞", "shortName": "BAR"},
                "awayTeam": {"id": 4, "name": "–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥", "shortName": "RMA"},
                "competition": {"name": "–õ–∞ –õ–∏–≥–∞"},
                "utcDate": (datetime.now() + timedelta(days=1)).isoformat(),
                "status": "SCHEDULED"
            },
            {
                "id": 3,
                "homeTeam": {"id": 5, "name": "–ë–∞–≤–∞—Ä–∏—è", "shortName": "BAY"},
                "awayTeam": {"id": 6, "name": "–ë–æ—Ä—É—Å—Å–∏—è", "shortName": "BVB"},
                "competition": {"name": "–ë—É–Ω–¥–µ—Å–ª–∏–≥–∞"},
                "utcDate": (datetime.now() + timedelta(days=1)).isoformat(),
                "status": "SCHEDULED"
            }
        ]
        
        self.mock_team_matches = {
            1: [  # –ú–∞–Ω—á–µ—Å—Ç–µ—Ä –Æ–Ω–∞–π—Ç–µ–¥
                {
                    "homeTeam": {"id": 1}, "awayTeam": {"id": 7},
                    "score": {"fullTime": {"home": 2, "away": 1}}
                },
                {
                    "homeTeam": {"id": 8}, "awayTeam": {"id": 1},
                    "score": {"fullTime": {"home": 0, "away": 3}}
                },
                {
                    "homeTeam": {"id": 1}, "awayTeam": {"id": 9},
                    "score": {"fullTime": {"home": 1, "away": 1}}
                },
                {
                    "homeTeam": {"id": 10}, "awayTeam": {"id": 1},
                    "score": {"fullTime": {"home": 2, "away": 4}}
                },
                {
                    "homeTeam": {"id": 1}, "awayTeam": {"id": 11},
                    "score": {"fullTime": {"home": 3, "away": 0}}
                }
            ],
            2: [  # –ß–µ–ª—Å–∏
                {
                    "homeTeam": {"id": 2}, "awayTeam": {"id": 12},
                    "score": {"fullTime": {"home": 1, "away": 2}}
                },
                {
                    "homeTeam": {"id": 13}, "awayTeam": {"id": 2},
                    "score": {"fullTime": {"home": 1, "away": 1}}
                },
                {
                    "homeTeam": {"id": 2}, "awayTeam": {"id": 14},
                    "score": {"fullTime": {"home": 0, "away": 1}}
                },
                {
                    "homeTeam": {"id": 15}, "awayTeam": {"id": 2},
                    "score": {"fullTime": {"home": 0, "away": 2}}
                },
                {
                    "homeTeam": {"id": 2}, "awayTeam": {"id": 16},
                    "score": {"fullTime": {"home": 2, "away": 0}}
                }
            ],
            3: [  # –ë–∞—Ä—Å–µ–ª–æ–Ω–∞
                {
                    "homeTeam": {"id": 3}, "awayTeam": {"id": 17},
                    "score": {"fullTime": {"home": 4, "away": 1}}
                },
                {
                    "homeTeam": {"id": 18}, "awayTeam": {"id": 3},
                    "score": {"fullTime": {"home": 0, "away": 2}}
                },
                {
                    "homeTeam": {"id": 3}, "awayTeam": {"id": 19},
                    "score": {"fullTime": {"home": 3, "away": 1}}
                },
                {
                    "homeTeam": {"id": 20}, "awayTeam": {"id": 3},
                    "score": {"fullTime": {"home": 1, "away": 3}}
                },
                {
                    "homeTeam": {"id": 3}, "awayTeam": {"id": 21},
                    "score": {"fullTime": {"home": 2, "away": 0}}
                }
            ],
            4: [  # –†–µ–∞–ª –ú–∞–¥—Ä–∏–¥
                {
                    "homeTeam": {"id": 4}, "awayTeam": {"id": 22},
                    "score": {"fullTime": {"home": 3, "away": 1}}
                },
                {
                    "homeTeam": {"id": 23}, "awayTeam": {"id": 4},
                    "score": {"fullTime": {"home": 0, "away": 2}}
                },
                {
                    "homeTeam": {"id": 4}, "awayTeam": {"id": 24},
                    "score": {"fullTime": {"home": 1, "away": 0}}
                },
                {
                    "homeTeam": {"id": 25}, "awayTeam": {"id": 4},
                    "score": {"fullTime": {"home": 2, "away": 2}}
                },
                {
                    "homeTeam": {"id": 4}, "awayTeam": {"id": 26},
                    "score": {"fullTime": {"home": 4, "away": 0}}
                }
            ]
        }
    
    async def get_upcoming_matches(self, days_ahead: int = 1) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ç—á–∏"""
        return self.mock_matches
    
    async def get_team_matches(self, team_id: int, limit: int = 10) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ç—á–∏ –∫–æ–º–∞–Ω–¥—ã"""
        return self.mock_team_matches.get(team_id, [])
    
    async def get_head_to_head(self, team1_id: int, team2_id: int, limit: int = 5) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–∏—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á"""
        # –ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        return [
            {
                "homeTeam": {"id": team1_id}, 
                "awayTeam": {"id": team2_id},
                "score": {"fullTime": {"home": 2, "away": 1}}
            },
            {
                "homeTeam": {"id": team2_id}, 
                "awayTeam": {"id": team1_id},
                "score": {"fullTime": {"home": 1, "away": 3}}
            }
        ]

class DemoBettingBot:
    """–î–µ–º–æ-–≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.api = MockFootballAPI()
        self.analyzer = FootballAnalyzer(self.api)
    
    async def run_demo(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞"""
        print("\nüèÜ Football Betting Analysis Bot - Demo Mode")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ç—á–∏
        matches = await self.api.get_upcoming_matches()
        
        for i, match in enumerate(matches, 1):
            print(f"\nüìç –ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞ {i}/{len(matches)}")
            print("-" * 40)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ç—á
            try:
                analysis = await self.analyzer.analyze_match(match)
                
                # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self.print_match_analysis(analysis)
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞–Ω–∞–ª–∏–∑–∞–º–∏
                if i < len(matches):
                    await asyncio.sleep(1)
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–∞: {e}")
        
        print("\n" + "=" * 60)
        print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞:")
        print("   1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram")
        print("   2. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Ç–æ–∫–µ–Ω–æ–º")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
    
    def print_match_analysis(self, analysis: Dict):
        """–í—ã–≤–æ–¥–∏—Ç –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        match = analysis['match']
        home_team = match['homeTeam']['name']
        away_team = match['awayTeam']['name']
        
        print(f"üèü  {home_team} vs {away_team}")
        print(f"üèÜ {match['competition']['name']}")
        
        # –§–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥
        home_form = analysis['home_form']
        away_form = analysis['away_form']
        
        print(f"\nüìä –§–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥:")
        print(f"   üè† {home_team}: {home_form['form_score']}% ({home_form['wins']}–ü-{home_form['draws']}–ù-{home_form['losses']}–ü)")
        print(f"   ‚úàÔ∏è  {away_team}: {away_form['form_score']}% ({away_form['wins']}–ü-{away_form['draws']}–ù-{away_form['losses']}–ü)")
        
        # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        betting = analysis['betting_analysis']
        print(f"\nüéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:")
        print(f"   üè† –ü–æ–±–µ–¥–∞ {home_team}: {betting['team1_win_prob']}%")
        print(f"   ‚úàÔ∏è  –ü–æ–±–µ–¥–∞ {away_team}: {betting['team2_win_prob']}%")
        print(f"   ü§ù –ù–∏—á—å—è: {betting['draw_prob']}%")
        print(f"   ‚öΩ –¢–æ—Ç–∞–ª >2.5: {betting['over_2_5_prob']}%")
        print(f"   üéØ –û–±–µ –∑–∞–±—å—é—Ç: {betting['btts_prob']}%")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if analysis['recommendations']:
            for rec in analysis['recommendations']:
                print(f"   ‚Ä¢ {rec}")
        else:
            print("   ‚Ä¢ –ú–∞—Ç—á —Å–ª–æ–∂–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π")
        
        print(f"\n‚≠ê –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ: {analysis['confidence_score']}%")

if __name__ == "__main__":
    async def main():
        demo = DemoBettingBot()
        await demo.run_demo()
    
    asyncio.run(main())