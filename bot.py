import logging
import asyncio
import os
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    ContextTypes, MessageHandler, filters
)
from dotenv import load_dotenv

from football_api import FootballAPI, FreeFootballAPI
from analyzer import FootballAnalyzer

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class FootballBettingBot:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.admin_id = os.getenv('ADMIN_USER_ID')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        try:
            self.api = FootballAPI()
        except:
            # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π
            self.api = FreeFootballAPI()
            logger.warning("Using mock API data")
        
        self.analyzer = FootballAnalyzer(self.api)
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.user_preferences = {}
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_message = f"""
üèÜ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Football Betting Analyzer, {user.first_name}!

–≠—Ç–æ—Ç –±–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞–≤–∫–∞–º.

üîπ /matches - –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞
üîπ /today - –ú–∞—Ç—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
üîπ /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
üîπ /help - –ü–æ–º–æ—â—å

–ë–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç:
‚Ä¢ –§–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∞—Ç—á–µ–π)
‚Ä¢ –¢—É—Ä–Ω–∏—Ä–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–∏—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á
‚Ä¢ –î–æ–º–∞—à–Ω–µ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–æ–ª–æ–≤

‚ö†Ô∏è –ü–æ–º–Ω–∏—Ç–µ: —Å—Ç–∞–≤–∫–∏ —Å–æ–ø—Ä—è–∂–µ–Ω—ã —Å —Ä–∏—Å–∫–æ–º. –ò–≥—Ä–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ!
        """
        
        keyboard = [
            [InlineKeyboardButton("‚öΩÔ∏è –ú–∞—Ç—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="tomorrow_matches")],
            [InlineKeyboardButton("üìÖ –ú–∞—Ç—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="today_matches")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_message, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üî∏ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/matches - –ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞
/today - –ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞

üî∏ *–ö–∞–∫ —á–∏—Ç–∞—Ç—å –∞–Ω–∞–ª–∏–∑:*
üè† - –î–æ–º–∞—à–Ω—è—è –∫–æ–º–∞–Ω–¥–∞
‚úàÔ∏è - –ì–æ—Å—Ç–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
üìä - –§–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥—ã (% –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞)
üéØ - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è
‚≠ê - –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ

üî∏ *–¢–∏–ø—ã —Å—Ç–∞–≤–æ–∫:*
‚Ä¢ –ò—Å—Ö–æ–¥ –º–∞—Ç—á–∞ (1X2)
‚Ä¢ –¢–æ—Ç–∞–ª –≥–æ–ª–æ–≤ (–±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ 2.5)
‚Ä¢ –û–±–µ –∑–∞–±—å—é—Ç (–¥–∞/–Ω–µ—Ç)

üî∏ *–§–∞–∫—Ç–æ—Ä—ã –∞–Ω–∞–ª–∏–∑–∞:*
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∞—Ç—á–µ–π –∫–æ–º–∞–Ω–¥—ã
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á
‚Ä¢ –î–æ–º–∞—à–Ω–µ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å

‚ö†Ô∏è –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π –æ —Å—Ç–∞–≤–∫–∞—Ö –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –≤–∞—à–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def get_matches_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /matches"""
        await self.send_matches_analysis(update, context, days_ahead=1)
    
    async def get_today_matches_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /today"""
        await self.send_matches_analysis(update, context, days_ahead=0)
    
    async def send_matches_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE, days_ahead: int = 1):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–µ–π"""
        chat_id = update.effective_chat.id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_msg = await context.bot.send_message(
            chat_id, 
            "üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–∞—Ç—á–∏... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏
            if hasattr(self.api, 'get_mock_data'):
                matches = await self.api.get_mock_data()
            else:
                matches = await self.api.get_upcoming_matches(days_ahead)
            
            if not matches:
                await loading_msg.edit_text("‚ùå –ú–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.")
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –º–∞—Ç—á–µ–π (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API)
            analyzed_matches = []
            for i, match in enumerate(matches[:5]):
                try:
                    analysis = await self.analyzer.analyze_match(match)
                    analyzed_matches.append(analysis)
                except Exception as e:
                    logger.error(f"Error analyzing match {i}: {e}")
                    continue
            
            if not analyzed_matches:
                await loading_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—á–∏.")
                return
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            await loading_msg.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            date_str = "—Å–µ–≥–æ–¥–Ω—è" if days_ahead == 0 else "–∑–∞–≤—Ç—Ä–∞"
            header = f"‚öΩÔ∏è *–ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–µ–π –Ω–∞ {date_str}*\n\n"
            
            for analysis in analyzed_matches:
                match_text = self.format_match_analysis(analysis)
                full_message = header + match_text
                
                keyboard = [
                    [InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                                        callback_data=f"details_{analysis['match']['id']}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await context.bot.send_message(
                    chat_id, 
                    full_message, 
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await asyncio.sleep(0.5)
                
        except Exception as e:
            logger.error(f"Error in send_matches_analysis: {e}")
            await loading_msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    
    def format_match_analysis(self, analysis: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        match = analysis['match']
        home_team = match['homeTeam']['name']
        away_team = match['awayTeam']['name']
        
        # –í—Ä–µ–º—è –º–∞—Ç—á–∞
        match_time = datetime.fromisoformat(match['utcDate'].replace('Z', '+00:00'))
        time_str = match_time.strftime('%H:%M')
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        text = f"üèü *{home_team} vs {away_team}*\n"
        text += f"üïê –í—Ä–µ–º—è: {time_str}\n"
        text += f"üèÜ –õ–∏–≥–∞: {match.get('competition', {}).get('name', 'N/A')}\n\n"
        
        # –§–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥
        home_form = analysis['home_form']
        away_form = analysis['away_form']
        
        text += f"üìä *–§–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥:*\n"
        text += f"üè† {home_team}: {home_form['form_score']}% "
        text += f"({home_form['wins']}–ü-{home_form['draws']}–ù-{home_form['losses']}–ü)\n"
        text += f"‚úàÔ∏è {away_team}: {away_form['form_score']}% "
        text += f"({away_form['wins']}–ü-{away_form['draws']}–ù-{away_form['losses']}–ü)\n\n"
        
        # –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        betting = analysis['betting_analysis']
        text += f"üéØ *–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:*\n"
        text += f"üè† –ü–æ–±–µ–¥–∞ {home_team}: {betting['team1_win_prob']}%\n"
        text += f"‚úàÔ∏è –ü–æ–±–µ–¥–∞ {away_team}: {betting['team2_win_prob']}%\n"
        text += f"ü§ù –ù–∏—á—å—è: {betting['draw_prob']}%\n"
        text += f"‚öΩÔ∏è –¢–æ—Ç–∞–ª >2.5: {betting['over_2_5_prob']}%\n"
        text += f"üéØ –û–±–µ –∑–∞–±—å—é—Ç: {betting['btts_prob']}%\n\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if analysis['recommendations']:
            text += f"üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
            for rec in analysis['recommendations']:
                text += f"‚Ä¢ {rec}\n"
        else:
            text += f"üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:* –ú–∞—Ç—á —Å–ª–æ–∂–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π\n"
        
        # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        confidence = analysis['confidence_score']
        text += f"\n‚≠ê –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ: {confidence}%"
        
        return text
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "tomorrow_matches":
            await self.send_matches_analysis(update, context, days_ahead=1)
        elif data == "today_matches":
            await self.send_matches_analysis(update, context, days_ahead=0)
        elif data == "settings":
            await self.show_settings(update, context)
        elif data.startswith("details_"):
            match_id = data.split("_")[1]
            await query.edit_message_text("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    
    async def show_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
        settings_text = """
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*

üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í—ã–∫–ª
üîπ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC
üîπ –õ—é–±–∏–º—ã–µ –ª–∏–≥–∏: –í—Å–µ
üîπ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 60%

_–§—É–Ω–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö_
        """
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                settings_text, 
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                settings_text, 
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Exception while handling an update: {context.error}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.token:
            logger.error("TELEGRAM_BOT_TOKEN not found in environment variables")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = Application.builder().token(self.token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        app.add_handler(CommandHandler("start", self.start_command))
        app.add_handler(CommandHandler("help", self.help_command))
        app.add_handler(CommandHandler("matches", self.get_matches_command))
        app.add_handler(CommandHandler("today", self.get_today_matches_command))
        app.add_handler(CallbackQueryHandler(self.button_handler))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        app.add_error_handler(self.error_handler)
        
        logger.info("Bot started successfully!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    bot = FootballBettingBot()
    bot.run()