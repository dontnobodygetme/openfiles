#!/usr/bin/env python3
"""
–û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–ô –ü–†–ò–ú–ï–†: Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è viewer —Å–∏–º—É–ª—è—Ü–∏–µ–π

‚ö†Ô∏è –í–ê–ñ–ù–û: –≠—Ç–æ—Ç –∫–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¢–û–õ–¨–ö–û –¥–ª—è:
- –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π
- –†–∞–±–æ—Ç—ã —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
- –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤

–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö (Twitch, YouTube, etc.)
"""

import asyncio
import logging
import json
import sqlite3
import os
from datetime import datetime
from typing import List, Dict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv
import aiohttp
from fake_useragent import UserAgent

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class AccountManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π"""
    
    def __init__(self, db_path: str = "accounts.db"):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS accounts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                password TEXT NOT NULL,
                cookies TEXT,
                user_agent TEXT,
                proxy TEXT,
                status TEXT DEFAULT 'active',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()
        conn.close()
    
    def add_account(self, username: str, password: str, proxy: str = None) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            ua = UserAgent()
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO accounts (username, password, user_agent, proxy)
                VALUES (?, ?, ?, ?)
            ''', (username, password, ua.random, proxy))
            conn.commit()
            conn.close()
            return True
        except sqlite3.IntegrityError:
            return False
    
    def get_active_accounts(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM accounts WHERE status = "active"')
        accounts = []
        for row in cursor.fetchall():
            accounts.append({
                'id': row[0],
                'username': row[1],
                'password': row[2],
                'cookies': row[3],
                'user_agent': row[4],
                'proxy': row[5],
                'status': row[6]
            })
        conn.close()
        return accounts

class ViewerSimulator:
    """
    –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –°–∏–º—É–ª—è—Ç–æ—Ä –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¢–û–õ–¨–ö–û –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö!
    """
    
    def __init__(self):
        self.active_sessions = {}
        self.session_timeout = aiohttp.ClientTimeout(total=30)
    
    async def simulate_viewer(self, account: Dict, stream_url: str, duration: int = 300):
        """
        –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç—Ä–∏–º–∞ (–¢–û–õ–¨–ö–û –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π)
        
        Args:
            account: –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            stream_url: URL —Å—Ç—Ä–∏–º–∞ (–¢–û–õ–¨–ö–û –≤–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞!)
            duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        logger.info(f"üéì –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è {account['username']}")
        
        # ‚ö†Ô∏è –í–ê–ñ–ù–û: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        # –†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥ –í–ê–®–£ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        
        try:
            headers = {
                'User-Agent': account['user_agent'],
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                'Accept-Language': 'en-US,en;q=0.5',
                'Accept-Encoding': 'gzip, deflate',
                'Connection': 'keep-alive',
            }
            
            proxy = account['proxy'] if account['proxy'] else None
            
            async with aiohttp.ClientSession(
                timeout=self.session_timeout,
                headers=headers
            ) as session:
                
                # –ü—Ä–∏–º–µ—Ä HTTP –∑–∞–ø—Ä–æ—Å–∞ (–∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É)
                async with session.get(stream_url, proxy=proxy) as response:
                    if response.status == 200:
                        logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {account['username']}")
                        
                        # –°–∏–º—É–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                        for i in range(duration // 30):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫
                            await asyncio.sleep(30)
                            logger.info(f"üì∫ {account['username']} –∞–∫—Ç–∏–≤–µ–Ω ({i+1}/{duration//30})")
                    
                    else:
                        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status}")
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è {account['username']}: {e}")
    
    async def start_mass_simulation(self, accounts: List[Dict], stream_url: str, max_concurrent: int = 50):
        """
        –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –Ω–∞–≥—Ä—É–∑–∫–∏
        
        Args:
            accounts: –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            stream_url: URL —Å—Ç—Ä–∏–º–∞
            max_concurrent: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        """
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–º–∞–∫—Å. {max_concurrent} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)")
        
        semaphore = asyncio.Semaphore(max_concurrent)
        
        async def limited_simulation(account):
            async with semaphore:
                await self.simulate_viewer(account, stream_url)
        
        tasks = [limited_simulation(account) for account in accounts]
        await asyncio.gather(*tasks, return_exceptions=True)

class StreamBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞"""
    
    def __init__(self, token: str):
        self.token = token
        self.account_manager = AccountManager()
        self.viewer_simulator = ViewerSimulator()
        self.authorized_users = set()  # ID –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        
        # ‚ö†Ô∏è –î–û–ë–ê–í–¨–¢–ï –ü–†–û–í–ï–†–ö–£ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò!
        # self.authorized_users.add(user_id)  # –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞!
        
        welcome_text = """
üéì –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–ô STREAM BOT

‚ö†Ô∏è –í–ê–ñ–ù–´–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¢–û–õ–¨–ö–û –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
‚Ä¢ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞ Twitch, YouTube –∏ –¥—Ä—É–≥–∏—Ö –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
‚Ä¢ –ú–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∞—Ç—å Terms of Service

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/accounts - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
/simulate - –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ (–¢–û–õ–¨–ö–û –¥–ª—è –≤–∞—à–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º!)
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/help - –ü–æ–º–æ—â—å
        """
        
        keyboard = [
            [InlineKeyboardButton("üìã –ê–∫–∫–∞—É–Ω—Ç—ã", callback_data="accounts")],
            [InlineKeyboardButton("üéÆ –°–∏–º—É–ª—è—Ü–∏—è", callback_data="simulate")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def accounts_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
        accounts = self.account_manager.get_active_accounts()
        
        text = f"üìã –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}\n\n"
        text += "‚ö†Ô∏è –ü–æ–º–Ω–∏—Ç–µ: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º!\n\n"
        
        if accounts:
            for i, acc in enumerate(accounts[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                text += f"{i}. {acc['username']} ({acc['status']})\n"
            
            if len(accounts) > 5:
                text += f"... –∏ –µ—â–µ {len(accounts) - 5} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        else:
            text += "–ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="add_account")],
            [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data="list_accounts")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(text, reply_markup=reply_markup)
    
    async def simulate_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        accounts = self.account_manager.get_active_accounts()
        
        if not accounts:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏")
            return
        
        warning_text = """
‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:

1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¢–û–õ–¨–ö–û –Ω–∞ –°–û–ë–°–¢–í–ï–ù–ù–´–• –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö!
2. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞ Twitch.tv, YouTube –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
3. –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã

–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –í–ê–®–ê –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞:
        """
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –≠—Ç–æ –ú–û–Ø –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞", callback_data="confirm_simulation")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(warning_text, reply_markup=reply_markup)
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "main_menu":
            await self.start_command(update, context)
        
        elif query.data == "accounts":
            await self.accounts_command(update, context)
        
        elif query.data == "simulate":
            await self.simulate_command(update, context)
        
        elif query.data == "confirm_simulation":
            await query.edit_message_text(
                "üîß –í–≤–µ–¥–∏—Ç–µ URL –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
                "–ü—Ä–∏–º–µ—Ä: https://your-platform.com/stream/gena_gensh\n\n"
                "‚ö†Ô∏è –¢–û–õ–¨–ö–û –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º!"
            )
        
        elif query.data == "status":
            active_accounts = len(self.account_manager.get_active_accounts())
            status_text = f"""
üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´

üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {active_accounts}
üéÆ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º—É–ª—è—Ü–∏–π: {len(self.viewer_simulator.active_sessions)}
üíª –°–∏—Å—Ç–µ–º–∞: –†–∞–±–æ—Ç–∞–µ—Ç

‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ!
            """
            await query.edit_message_text(status_text)
        
        elif query.data == "help":
            help_text = """
‚ùì –ü–û–ú–û–©–¨

–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –°–û–ë–°–¢–í–ï–ù–ù–´–• –ø–ª–∞—Ç—Ñ–æ—Ä–º.

üî∏ /accounts - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
üî∏ /simulate - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
üî∏ /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

‚ö†Ô∏è –í–ê–ñ–ù–û:
‚Ä¢ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
‚Ä¢ –ú–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∞—Ç—å Terms of Service
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
‚Ä¢ –î–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–µ–≥–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
‚Ä¢ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–π—Ç–µ —Å —Ä–µ–∞–ª—å–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π
            """
            await query.edit_message_text(help_text)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
        print("TELEGRAM_BOT_TOKEN=your_bot_token_here")
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = StreamBot(token)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(CommandHandler("accounts", bot.accounts_command))
    application.add_handler(CommandHandler("simulate", bot.simulate_command))
    application.add_handler(CallbackQueryHandler(bot.button_handler))
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ Stream Bot...")
    logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¢–û–õ–¨–ö–û –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()