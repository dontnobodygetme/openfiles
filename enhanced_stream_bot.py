#!/usr/bin/env python3
"""
–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è viewer —Å–∏–º—É–ª—è—Ü–∏–µ–π

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –≠—Ç–æ—Ç –∫–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¢–û–õ–¨–ö–û –¥–ª—è:
- –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π
- –†–∞–±–æ—Ç—ã —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
- –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
- –ò–∑—É—á–µ–Ω–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —Ä–∞–±–æ—Ç—ã web-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π

–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö (Twitch, YouTube, etc.)
"""

import asyncio
import logging
import json
import sqlite3
import os
import hashlib
import time
from datetime import datetime, timedelta
from typing import List, Dict, Set
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
import aiohttp
from fake_useragent import UserAgent

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_level = getattr(logging, os.getenv('LOG_LEVEL', 'INFO').upper())
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=log_level,
    handlers=[
        logging.FileHandler('stream_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class SecurityManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    @staticmethod
    def hash_password(password: str) -> str:
        """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
        return hashlib.sha256(password.encode()).hexdigest()
    
    @staticmethod
    def get_authorized_users() -> Set[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users_str = os.getenv('AUTHORIZED_USERS', '')
        if not users_str:
            logger.warning("‚ö†Ô∏è AUTHORIZED_USERS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ë–æ—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º!")
            return set()
        
        try:
            return {int(user_id.strip()) for user_id in users_str.split(',') if user_id.strip()}
        except ValueError:
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç AUTHORIZED_USERS")
            return set()

class AccountManager:
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
    
    def __init__(self, db_path: str = None):
        self.db_path = db_path or os.getenv('DATABASE_PATH', 'accounts.db')
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS accounts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                password_hash TEXT NOT NULL,
                cookies TEXT,
                user_agent TEXT,
                proxy TEXT,
                status TEXT DEFAULT 'active',
                last_used TIMESTAMP,
                success_count INTEGER DEFAULT 0,
                error_count INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS simulation_logs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                account_id INTEGER,
                target_url TEXT NOT NULL,
                duration INTEGER,
                status TEXT,
                started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                completed_at TIMESTAMP,
                error_message TEXT
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def add_account(self, username: str, password: str, proxy: str = None) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è"""
        try:
            ua = UserAgent()
            password_hash = SecurityManager.hash_password(password)
            
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO accounts (username, password_hash, user_agent, proxy)
                VALUES (?, ?, ?, ?)
            ''', (username, password_hash, ua.random, proxy))
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {username} –¥–æ–±–∞–≤–ª–µ–Ω")
            return True
            
        except sqlite3.IntegrityError:
            logger.warning(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            return False
    
    def get_active_accounts(self, limit: int = None) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        query = 'SELECT * FROM accounts WHERE status = "active" ORDER BY success_count DESC'
        if limit:
            query += f' LIMIT {limit}'
            
        cursor.execute(query)
        accounts = []
        
        for row in cursor.fetchall():
            accounts.append({
                'id': row[0],
                'username': row[1],
                'password_hash': row[2],
                'cookies': row[3],
                'user_agent': row[4],
                'proxy': row[5],
                'status': row[6],
                'last_used': row[7],
                'success_count': row[8],
                'error_count': row[9]
            })
        
        conn.close()
        return accounts
    
    def update_account_stats(self, account_id: int, success: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        if success:
            cursor.execute('''
                UPDATE accounts 
                SET success_count = success_count + 1, last_used = CURRENT_TIMESTAMP
                WHERE id = ?
            ''', (account_id,))
        else:
            cursor.execute('''
                UPDATE accounts 
                SET error_count = error_count + 1
                WHERE id = ?
            ''', (account_id,))
            
        conn.commit()
        conn.close()
    
    def log_simulation(self, user_id: int, account_id: int, target_url: str, 
                      duration: int, status: str, error_message: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO simulation_logs 
            (user_id, account_id, target_url, duration, status, error_message, completed_at)
            VALUES (?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
        ''', (user_id, account_id, target_url, duration, status, error_message))
        
        conn.commit()
        conn.close()

class ViewerSimulator:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ä–µ—Å—É—Ä—Å–æ–≤"""
    
    def __init__(self):
        self.active_sessions = {}
        self.session_timeout = aiohttp.ClientTimeout(total=30)
        self.max_concurrent = int(os.getenv('MAX_CONCURRENT_SIMULATIONS', 50))
        self.max_duration = int(os.getenv('MAX_SIMULATION_DURATION', 300))
        
    async def simulate_viewer(self, account: Dict, stream_url: str, 
                            duration: int = None, user_id: int = None) -> bool:
        """
        –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ä–µ—Å—É—Ä—Å–æ–≤
        
        Args:
            account: –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            stream_url: URL —Å—Ç—Ä–∏–º–∞ (–¢–û–õ–¨–ö–û –≤–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞!)
            duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏
        """
        duration = min(duration or 300, self.max_duration)
        account_id = account['id']
        
        logger.info(f"üéì –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –°–∏–º—É–ª—è—Ü–∏—è –¥–ª—è {account['username']} –Ω–∞ {duration}—Å–µ–∫")
        
        start_time = time.time()
        success = False
        error_message = None
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL (–±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è)
            if not self._is_safe_url(stream_url):
                raise ValueError("–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–ª–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π URL")
            
            headers = {
                'User-Agent': account['user_agent'],
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
                'Accept-Encoding': 'gzip, deflate',
                'Connection': 'keep-alive',
                'Cache-Control': 'no-cache',
                'Pragma': 'no-cache'
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º cookies –µ—Å–ª–∏ –µ—Å—Ç—å
            cookies = {}
            if account['cookies']:
                try:
                    cookies = json.loads(account['cookies'])
                except json.JSONDecodeError:
                    logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç cookies –¥–ª—è {account['username']}")
            
            proxy = account['proxy'] if account['proxy'] else None
            
            async with aiohttp.ClientSession(
                timeout=self.session_timeout,
                headers=headers,
                cookies=cookies
            ) as session:
                
                # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –∫ —Å—Ç—Ä–∏–º—É
                async with session.get(stream_url, proxy=proxy) as response:
                    if response.status == 200:
                        logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {account['username']}")
                        
                        # –°–∏–º—É–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
                        intervals = duration // 30  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫
                        
                        for i in range(intervals):
                            await asyncio.sleep(30)
                            
                            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π heartbeat –∑–∞–ø—Ä–æ—Å
                            try:
                                async with session.head(stream_url, proxy=proxy) as heartbeat:
                                    if heartbeat.status == 200:
                                        logger.info(f"üì∫ {account['username']} –∞–∫—Ç–∏–≤–µ–Ω ({i+1}/{intervals})")
                                    else:
                                        logger.warning(f"‚ö†Ô∏è Heartbeat failed: {heartbeat.status}")
                            except Exception as e:
                                logger.warning(f"‚ö†Ô∏è Heartbeat error: {e}")
                        
                        success = True
                        logger.info(f"‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –¥–ª—è {account['username']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                        
                    else:
                        error_message = f"HTTP {response.status}"
                        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status}")
                        
        except Exception as e:
            error_message = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è {account['username']}: {e}")
        
        finally:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if user_id:
                AccountManager().log_simulation(
                    user_id, account_id, stream_url, duration, 
                    'success' if success else 'error', error_message
                )
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
            AccountManager().update_account_stats(account_id, success)
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
            session_key = f"{account_id}_{user_id}"
            self.active_sessions.pop(session_key, None)
        
        return success
    
    def _is_safe_url(self, url: str) -> bool:
        """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ URL"""
        # –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã)
        forbidden_domains = [
            'twitch.tv', 'youtube.com', 'youtu.be', 'facebook.com',
            'instagram.com', 'tiktok.com', 'vk.com', 'ok.ru'
        ]
        
        url_lower = url.lower()
        for domain in forbidden_domains:
            if domain in url_lower:
                logger.error(f"‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω: {domain}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        if not (url.startswith('http://') or url.startswith('https://')):
            logger.error("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª")
            return False
        
        return True
    
    async def start_mass_simulation(self, accounts: List[Dict], stream_url: str, 
                                  user_id: int, duration: int = 300) -> Dict:
        """
        –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        duration = min(duration, self.max_duration)
        accounts = accounts[:self.max_concurrent]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–º–∞–∫—Å. {self.max_concurrent})")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º–∞—Ñ–æ—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏
        semaphore = asyncio.Semaphore(min(self.max_concurrent, 20))
        
        async def limited_simulation(account):
            async with semaphore:
                session_key = f"{account['id']}_{user_id}"
                self.active_sessions[session_key] = {
                    'account': account['username'],
                    'started': datetime.now(),
                    'url': stream_url
                }
                
                return await self.simulate_viewer(account, stream_url, duration, user_id)
        
        # –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–π —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –æ—à–∏–±–æ–∫
        tasks = [limited_simulation(account) for account in accounts]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = {
            'total': len(accounts),
            'success': sum(1 for r in results if r is True),
            'failed': sum(1 for r in results if r is False),
            'errors': sum(1 for r in results if isinstance(r, Exception)),
            'duration': duration
        }
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['success']} —É—Å–ø–µ—à–Ω—ã—Ö, {stats['failed']} –Ω–µ—É–¥–∞—á–Ω—ã—Ö, {stats['errors']} –æ—à–∏–±–æ–∫")
        return stats

class EnhancedStreamBot:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Telegram –±–æ—Ç–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é"""
    
    def __init__(self, token: str):
        self.token = token
        self.account_manager = AccountManager()
        self.viewer_simulator = ViewerSimulator()
        self.authorized_users = SecurityManager.get_authorized_users()
        self.user_states = {}  # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        if not self.authorized_users:
            logger.warning("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç!")
    
    def check_authorization(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.authorized_users:
            return True  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º (–¥–ª—è –¥–µ–º–æ)
        return user_id in self.authorized_users
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        
        if not self.check_authorization(user_id):
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
            )
            logger.warning(f"üö´ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç {user_id}")
            return
        
        welcome_text = f"""
üéì –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–ô STREAM BOT v2.0

üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {update.effective_user.first_name}!

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¢–û–õ–¨–ö–û –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
‚Ä¢ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞ Twitch, YouTube –∏ –¥—Ä—É–≥–∏—Ö –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
‚Ä¢ –ú–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∞—Ç—å Terms of Service

üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ ID: {user_id}
‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ‚úÖ
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(self.account_manager.get_active_accounts())}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/accounts - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
/simulate - –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ (–¢–û–õ–¨–ö–û –¥–ª—è –≤–∞—à–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º!)
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/logs - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
/help - –ü–æ–º–æ—â—å
        """
        
        keyboard = [
            [InlineKeyboardButton("üìã –ê–∫–∫–∞—É–Ω—Ç—ã", callback_data="accounts"),
             InlineKeyboardButton("üéÆ –°–∏–º—É–ª—è—Ü–∏—è", callback_data="simulate")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status"),
             InlineKeyboardButton("üìÑ –õ–æ–≥–∏", callback_data="logs")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def handle_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        
        if not self.check_authorization(user_id):
            return
        
        user_state = self.user_states.get(user_id)
        
        if user_state == "waiting_for_url":
            stream_url = update.message.text.strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
            if not stream_url.startswith(('http://', 'https://')):
                await update.message.reply_text("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
            if not self.viewer_simulator._is_safe_url(stream_url):
                await update.message.reply_text(
                    "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω!\n\n"
                    "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¢–û–õ–¨–ö–û —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:\n"
                    "‚Ä¢ –ù–ï Twitch.tv\n"
                    "‚Ä¢ –ù–ï YouTube.com\n"
                    "‚Ä¢ –ù–ï Facebook, Instagram, TikTok\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å URL –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            self.user_states[user_id] = {"state": "configuring", "url": stream_url}
            
            accounts_count = len(self.account_manager.get_active_accounts())
            
            keyboard = [
                [InlineKeyboardButton("üéØ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç (5 –º–∏–Ω)", callback_data="quick_start")],
                [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="configure_sim")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚úÖ URL –ø—Ä–∏–Ω—è—Ç: {stream_url}\n\n"
                f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {accounts_count}\n"
                f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞:",
                reply_markup=reply_markup
            )
        
        else:
            await update.message.reply_text(
                "‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –≤–≤–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏."
            )

def main():
    """–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"""
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example")
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = EnhancedStreamBot(token)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_text_input))
    # application.add_handler(CallbackQueryHandler(bot.button_handler))  # –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ Stream Bot v2.0...")
    logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¢–û–õ–¨–ö–û –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()