#!/usr/bin/env python3
"""
–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è viewer —Å–∏–º—É–ª—è—Ü–∏–µ–π

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –≠—Ç–æ—Ç –∫–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¢–û–õ–¨–ö–û –¥–ª—è:
- –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π
- –†–∞–±–æ—Ç—ã —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
- –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
- –ò–∑—É—á–µ–Ω–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —Ä–∞–±–æ—Ç—ã web-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π

–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö (Twitch, YouTube, etc.)
"""

import asyncio
import logging
import json
import sqlite3
import os
import hashlib
import time
from datetime import datetime, timedelta
from typing import List, Dict, Set
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
import aiohttp
from fake_useragent import UserAgent

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_level = getattr(logging, os.getenv('LOG_LEVEL', 'INFO').upper())
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=log_level,
    handlers=[
        logging.FileHandler('stream_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class SecurityManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    @staticmethod
    def hash_password(password: str) -> str:
        """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
        return hashlib.sha256(password.encode()).hexdigest()
    
    @staticmethod
    def get_authorized_users() -> Set[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users_str = os.getenv('AUTHORIZED_USERS', '')
        if not users_str:
            logger.warning("‚ö†Ô∏è AUTHORIZED_USERS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ë–æ—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º!")
            return set()
        
        try:
            return {int(user_id.strip()) for user_id in users_str.split(',') if user_id.strip()}
        except ValueError:
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç AUTHORIZED_USERS")
            return set()

class AccountManager:
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
    
    def __init__(self, db_path: str = None):
        self.db_path = db_path or os.getenv('DATABASE_PATH', 'accounts.db')
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS accounts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                password_hash TEXT NOT NULL,
                cookies TEXT,
                user_agent TEXT,
                proxy TEXT,
                status TEXT DEFAULT 'active',
                last_used TIMESTAMP,
                success_count INTEGER DEFAULT 0,
                error_count INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS simulation_logs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                account_id INTEGER,
                target_url TEXT NOT NULL,
                duration INTEGER,
                status TEXT,
                started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                completed_at TIMESTAMP,
                error_message TEXT
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def add_account(self, username: str, password: str, proxy: str = None) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è"""
        try:
            ua = UserAgent()
            password_hash = SecurityManager.hash_password(password)
            
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO accounts (username, password_hash, user_agent, proxy)
                VALUES (?, ?, ?, ?)
            ''', (username, password_hash, ua.random, proxy))
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {username} –¥–æ–±–∞–≤–ª–µ–Ω")
            return True
            
        except sqlite3.IntegrityError:
            logger.warning(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            return False
    
    def get_active_accounts(self, limit: int = None) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        query = 'SELECT * FROM accounts WHERE status = "active" ORDER BY success_count DESC'
        if limit:
            query += f' LIMIT {limit}'
            
        cursor.execute(query)
        accounts = []
        
        for row in cursor.fetchall():
            accounts.append({
                'id': row[0],
                'username': row[1],
                'password_hash': row[2],
                'cookies': row[3],
                'user_agent': row[4],
                'proxy': row[5],
                'status': row[6],
                'last_used': row[7],
                'success_count': row[8],
                'error_count': row[9]
            })
        
        conn.close()
        return accounts
    
    def update_account_stats(self, account_id: int, success: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        if success:
            cursor.execute('''
                UPDATE accounts 
                SET success_count = success_count + 1, last_used = CURRENT_TIMESTAMP
                WHERE id = ?
            ''', (account_id,))
        else:
            cursor.execute('''
                UPDATE accounts 
                SET error_count = error_count + 1
                WHERE id = ?
            ''', (account_id,))
            
        conn.commit()
        conn.close()
    
    def log_simulation(self, user_id: int, account_id: int, target_url: str, 
                      duration: int, status: str, error_message: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO simulation_logs 
            (user_id, account_id, target_url, duration, status, error_message, completed_at)
            VALUES (?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
        ''', (user_id, account_id, target_url, duration, status, error_message))
        
        conn.commit()
        conn.close()

class ViewerSimulator:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ä–µ—Å—É—Ä—Å–æ–≤"""
    
    def __init__(self):
        self.active_sessions = {}
        self.session_timeout = aiohttp.ClientTimeout(total=30)
        self.max_concurrent = int(os.getenv('MAX_CONCURRENT_SIMULATIONS', 50))
        self.max_duration = int(os.getenv('MAX_SIMULATION_DURATION', 300))
        
    async def simulate_viewer(self, account: Dict, stream_url: str, 
                            duration: int = None, user_id: int = None) -> bool:
        """
        –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ä–µ—Å—É—Ä—Å–æ–≤
        
        Args:
            account: –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            stream_url: URL —Å—Ç—Ä–∏–º–∞ (–¢–û–õ–¨–ö–û –≤–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞!)
            duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏
        """
        duration = min(duration or 300, self.max_duration)
        account_id = account['id']
        
        logger.info(f"üéì –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –°–∏–º—É–ª—è—Ü–∏—è –¥–ª—è {account['username']} –Ω–∞ {duration}—Å–µ–∫")
        
        start_time = time.time()
        success = False
        error_message = None
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL (–±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è)
            if not self._is_safe_url(stream_url):
                raise ValueError("–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–ª–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π URL")
            
            headers = {
                'User-Agent': account['user_agent'],
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
                'Accept-Encoding': 'gzip, deflate',
                'Connection': 'keep-alive',
                'Cache-Control': 'no-cache',
                'Pragma': 'no-cache'
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º cookies –µ—Å–ª–∏ –µ—Å—Ç—å
            cookies = {}
            if account['cookies']:
                try:
                    cookies = json.loads(account['cookies'])
                except json.JSONDecodeError:
                    logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç cookies –¥–ª—è {account['username']}")
            
            proxy = account['proxy'] if account['proxy'] else None
            
            async with aiohttp.ClientSession(
                timeout=self.session_timeout,
                headers=headers,
                cookies=cookies
            ) as session:
                
                # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –∫ —Å—Ç—Ä–∏–º—É
                async with session.get(stream_url, proxy=proxy) as response:
                    if response.status == 200:
                        logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {account['username']}")
                        
                        # –°–∏–º—É–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
                        intervals = duration // 30  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫
                        
                        for i in range(intervals):
                            await asyncio.sleep(30)
                            
                            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π heartbeat –∑–∞–ø—Ä–æ—Å
                            try:
                                async with session.head(stream_url, proxy=proxy) as heartbeat:
                                    if heartbeat.status == 200:
                                        logger.info(f"üì∫ {account['username']} –∞–∫—Ç–∏–≤–µ–Ω ({i+1}/{intervals})")
                                    else:
                                        logger.warning(f"‚ö†Ô∏è Heartbeat failed: {heartbeat.status}")
                            except Exception as e:
                                logger.warning(f"‚ö†Ô∏è Heartbeat error: {e}")
                        
                        success = True
                        logger.info(f"‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –¥–ª—è {account['username']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                        
                    else:
                        error_message = f"HTTP {response.status}"
                        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status}")
                        
        except Exception as e:
            error_message = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è {account['username']}: {e}")
        
        finally:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if user_id:
                AccountManager().log_simulation(
                    user_id, account_id, stream_url, duration, 
                    'success' if success else 'error', error_message
                )
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
            AccountManager().update_account_stats(account_id, success)
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
            session_key = f"{account_id}_{user_id}"
            self.active_sessions.pop(session_key, None)
        
        return success
    
    def _is_safe_url(self, url: str) -> bool:
        """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ URL"""
        # –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã)
        forbidden_domains = [
            'twitch.tv', 'youtube.com', 'youtu.be', 'facebook.com',
            'instagram.com', 'tiktok.com', 'vk.com', 'ok.ru'
        ]
        
        url_lower = url.lower()
        for domain in forbidden_domains:
            if domain in url_lower:
                logger.error(f"‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω: {domain}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        if not (url.startswith('http://') or url.startswith('https://')):
            logger.error("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª")
            return False
        
        return True
    
    async def start_mass_simulation(self, accounts: List[Dict], stream_url: str, 
                                  user_id: int, duration: int = 300) -> Dict:
        """
        –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        duration = min(duration, self.max_duration)
        accounts = accounts[:self.max_concurrent]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–º–∞–∫—Å. {self.max_concurrent})")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º–∞—Ñ–æ—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏
        semaphore = asyncio.Semaphore(min(self.max_concurrent, 20))
        
        async def limited_simulation(account):
            async with semaphore:
                session_key = f"{account['id']}_{user_id}"
                self.active_sessions[session_key] = {
                    'account': account['username'],
                    'started': datetime.now(),
                    'url': stream_url
                }
                
                return await self.simulate_viewer(account, stream_url, duration, user_id)
        
        # –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–π —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –æ—à–∏–±–æ–∫
        tasks = [limited_simulation(account) for account in accounts]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = {
            'total': len(accounts),
            'success': sum(1 for r in results if r is True),
            'failed': sum(1 for r in results if r is False),
            'errors': sum(1 for r in results if isinstance(r, Exception)),
            'duration': duration
        }
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['success']} —É—Å–ø–µ—à–Ω—ã—Ö, {stats['failed']} –Ω–µ—É–¥–∞—á–Ω—ã—Ö, {stats['errors']} –æ—à–∏–±–æ–∫")
        return stats

class EnhancedStreamBot:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Telegram –±–æ—Ç–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é"""
    
    def __init__(self, token: str):
        self.token = token
        self.account_manager = AccountManager()
        self.viewer_simulator = ViewerSimulator()
        self.authorized_users = SecurityManager.get_authorized_users()
        self.user_states = {}  # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        if not self.authorized_users:
            logger.warning("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç!")
    
    def check_authorization(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.authorized_users:
            return True  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º (–¥–ª—è –¥–µ–º–æ)
        return user_id in self.authorized_users
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        
        if not self.check_authorization(user_id):
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
            )
            logger.warning(f"üö´ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç {user_id}")
            return
        
        welcome_text = f"""
üéì –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–ô STREAM BOT v2.0

üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {update.effective_user.first_name}!

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¢–û–õ–¨–ö–û –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
‚Ä¢ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞ Twitch, YouTube –∏ –¥—Ä—É–≥–∏—Ö –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
‚Ä¢ –ú–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∞—Ç—å Terms of Service

üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ ID: {user_id}
‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ‚úÖ
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(self.account_manager.get_active_accounts())}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/accounts - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
/simulate - –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ (–¢–û–õ–¨–ö–û –¥–ª—è –≤–∞—à–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º!)
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/help - –ü–æ–º–æ—â—å
        """
        
        keyboard = [
            [InlineKeyboardButton("üìã –ê–∫–∫–∞—É–Ω—Ç—ã", callback_data="accounts"),
             InlineKeyboardButton("üéÆ –°–∏–º—É–ª—è—Ü–∏—è", callback_data="simulate")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status"),
             InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def accounts_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
        user_id = update.effective_user.id
        
        if not self.check_authorization(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        accounts = self.account_manager.get_active_accounts()
        
        text = f"üìã –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê–ú–ò\n\n"
        text += f"üìä –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}\n"
        text += f"‚ö° –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ: {self.viewer_simulator.max_concurrent}\n\n"
        
        if accounts:
            text += "üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã:\n"
            for i, acc in enumerate(accounts[:5], 1):
                success_rate = 0
                if acc['success_count'] + acc['error_count'] > 0:
                    success_rate = (acc['success_count'] / (acc['success_count'] + acc['error_count'])) * 100
                
                text += f"{i}. {acc['username']} "
                text += f"(‚úÖ{acc['success_count']} ‚ùå{acc['error_count']} "
                text += f"üìà{success_rate:.1f}%)\n"
            
            if len(accounts) > 5:
                text += f"... –∏ –µ—â–µ {len(accounts) - 5} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        else:
            text += "–ê–∫–∫–∞—É–Ω—Ç—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
        
        text += "\n‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º!"
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="add_account")],
            [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data="list_accounts")],
            [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="clear_accounts")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(text, reply_markup=reply_markup)
    
    async def simulate_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        user_id = update.effective_user.id
        
        if not self.check_authorization(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        accounts = self.account_manager.get_active_accounts()
        
        if not accounts:
            await update.message.reply_text(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏!\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /accounts"
            )
            return
        
        warning_text = f"""
‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:

1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¢–û–õ–¨–ö–û –Ω–∞ –°–û–ë–°–¢–í–ï–ù–ù–´–• –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö!
2. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞ Twitch.tv, YouTube –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
3. –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã

üìä –î–æ—Å—Ç—É–ø–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}
‚ö° –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ: {min(len(accounts), self.viewer_simulator.max_concurrent)}

–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –í–ê–®–ê –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞:
        """
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –≠—Ç–æ –ú–û–Ø –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞", callback_data="confirm_simulation")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(warning_text, reply_markup=reply_markup)
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        user_id = update.effective_user.id
        
        if not self.check_authorization(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        accounts = self.account_manager.get_active_accounts()
        active_sessions = len(self.viewer_simulator.active_sessions)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        total_success = sum(acc['success_count'] for acc in accounts)
        total_errors = sum(acc['error_count'] for acc in accounts)
        
        status_text = f"""
üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´

üë• –ê–∫–∫–∞—É–Ω—Ç—ã:
‚Ä¢ –í—Å–µ–≥–æ: {len(accounts)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {active_sessions}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {total_success}
‚Ä¢ –û—à–∏–±–æ–∫: {total_errors}

‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞:
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ: {self.viewer_simulator.max_concurrent}
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.viewer_simulator.max_duration}—Å
‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç

‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ!
        """
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="status")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(status_text, reply_markup=reply_markup)
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        if not self.check_authorization(user_id):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        data = query.data
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if data == "main_menu":
            await self.start_command(update, context)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        elif data == "accounts":
            await self.accounts_command(update, context)
        
        elif data == "add_account":
            self.user_states[user_id] = "waiting_for_account"
            await query.edit_message_text(
                "‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`–ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å`\n\n"
                "–ü—Ä–∏–º–µ—Ä: `myuser123:mypassword456`\n\n"
                "‚ö†Ô∏è –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º!\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
            )
        
        elif data == "list_accounts":
            accounts = self.account_manager.get_active_accounts()
            
            if not accounts:
                text = "üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç"
            else:
                text = f"üìã –í–°–ï –ê–ö–ö–ê–£–ù–¢–´ ({len(accounts)})\n\n"
                for i, acc in enumerate(accounts, 1):
                    success_rate = 0
                    total_ops = acc['success_count'] + acc['error_count']
                    if total_ops > 0:
                        success_rate = (acc['success_count'] / total_ops) * 100
                    
                    last_used = acc['last_used'] or "–ù–∏–∫–æ–≥–¥–∞"
                    if acc['last_used']:
                        last_used = "–ù–µ–¥–∞–≤–Ω–æ"
                    
                    text += f"{i}. **{acc['username']}**\n"
                    text += f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {acc['success_count']}\n"
                    text += f"   ‚ùå –û—à–∏–±–æ–∫: {acc['error_count']}\n"
                    text += f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%\n"
                    text += f"   üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {last_used}\n\n"
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="add_account")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="accounts")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup)
        
        elif data == "clear_accounts":
            keyboard = [
                [InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –í–°–ï", callback_data="confirm_clear")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="accounts")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!\n\n"
                "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∞–∫–∫–∞—É–Ω—Ç—ã?\n"
                "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
                reply_markup=reply_markup
            )
        
        elif data == "confirm_clear":
            # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            import os
            if os.path.exists(self.account_manager.db_path):
                conn = sqlite3.connect(self.account_manager.db_path)
                cursor = conn.cursor()
                cursor.execute("DELETE FROM accounts")
                conn.commit()
                conn.close()
            
            await query.edit_message_text(
                "‚úÖ –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã!\n\n"
                "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="add_account")],
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        
        # –°–∏–º—É–ª—è—Ü–∏—è
        elif data == "simulate":
            await self.simulate_command(update, context)
        
        elif data == "confirm_simulation":
            self.user_states[user_id] = "waiting_for_url"
            await query.edit_message_text(
                "üåê –í–í–ï–î–ò–¢–ï URL –°–¢–†–ò–ú–ê\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
                "–ü—Ä–∏–º–µ—Ä: `https://your-platform.com/stream/gena_gensh`\n\n"
                "‚ö†Ô∏è –¢–û–õ–¨–ö–û –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º!\n"
                "–ù–ï Twitch, YouTube, Facebook –∏ —Ç.–¥.\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
            )
        
        # –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑—Ä–∏—Ç–µ–ª–µ–π
        elif data.startswith("viewers_"):
            viewer_count = int(data.split("_")[1])
            user_state = self.user_states.get(user_id, {})
            user_state["viewer_count"] = viewer_count
            self.user_states[user_id] = user_state
            
            keyboard = [
                [InlineKeyboardButton("üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨", callback_data="start_simulation")],
                [InlineKeyboardButton("üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="change_viewers")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏:\n\n"
                f"üåê URL: {user_state.get('url', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑—Ä–∏—Ç–µ–ª–µ–π: {viewer_count}\n"
                f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5 –º–∏–Ω—É—Ç\n\n"
                f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –≤–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞!",
                reply_markup=reply_markup
            )
        
        elif data == "custom_viewers":
            user_state = self.user_states.get(user_id, {})
            user_state["state"] = "waiting_custom_viewers"
            self.user_states[user_id] = user_state
            
            accounts_count = len(self.account_manager.get_active_accounts())
            max_viewers = min(accounts_count, self.viewer_simulator.max_concurrent)
            
            await query.edit_message_text(
                f"ÔøΩ –£–ö–ê–ñ–ò–¢–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ó–†–ò–¢–ï–õ–ï–ô\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {max_viewers}\n\n"
                f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {accounts_count}\n"
                f"‚ö° –ú–∞–∫—Å–∏–º—É–º —Å–∏—Å—Ç–µ–º—ã: {self.viewer_simulator.max_concurrent}\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
            )
        
        elif data == "change_viewers":
            user_state = self.user_states.get(user_id, {})
            url = user_state.get('url', '')
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑—Ä–∏—Ç–µ–ª–µ–π
            self.user_states[user_id] = {"state": "selecting_viewers", "url": url}
            
            accounts_count = len(self.account_manager.get_active_accounts())
            max_viewers = min(accounts_count, self.viewer_simulator.max_concurrent)
            
            keyboard = [
                [InlineKeyboardButton(f"üë• –í—Å–µ ({accounts_count})", callback_data=f"viewers_{accounts_count}")],
                [InlineKeyboardButton(f"üéØ –ü–æ–ª–æ–≤–∏–Ω–∞ ({accounts_count//2})", callback_data=f"viewers_{accounts_count//2}")],
                [InlineKeyboardButton(f"ÔøΩ –ú–∞–∫—Å–∏–º—É–º ({max_viewers})", callback_data=f"viewers_{max_viewers}")],
                [InlineKeyboardButton("üî¢ –£–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="custom_viewers")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"üë• –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑—Ä–∏—Ç–µ–ª–µ–π:\n\n"
                f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {accounts_count}\n"
                f"‚ö° –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ: {max_viewers}",
                reply_markup=reply_markup
            )
        
        elif data == "start_simulation":
            user_state = self.user_states.get(user_id, {})
            url = user_state.get('url')
            viewer_count = user_state.get('viewer_count')
            
            if not url or not viewer_count:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏")
                return
            
            # –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
            await query.edit_message_text(
                f"üöÄ –ó–ê–ü–£–°–ö –°–ò–ú–£–õ–Ø–¶–ò–ò...\n\n"
                f"üåê URL: {url}\n"
                f"üë• –ó—Ä–∏—Ç–µ–ª–µ–π: {viewer_count}\n"
                f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5 –º–∏–Ω—É—Ç\n\n"
                f"üìä –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
            accounts = self.account_manager.get_active_accounts(limit=viewer_count)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(self._run_simulation_background(user_id, accounts, url, query.message.chat_id, context))
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.user_states.pop(user_id, None)
        
        # –°—Ç–∞—Ç—É—Å
        elif data == "status":
            await self.status_command(update, context)
        
        # –ü–æ–º–æ—â—å
        elif data == "help":
            help_text = """
‚ùì –ü–û–ú–û–©–¨

–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –°–û–ë–°–¢–í–ï–ù–ù–´–• –ø–ª–∞—Ç—Ñ–æ—Ä–º.

üî∏ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
üî∏ /accounts - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
üî∏ /simulate - –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
üî∏ /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å
–ü—Ä–∏–º–µ—Ä: user123:pass456

‚ö†Ô∏è –í–ê–ñ–ù–û:
‚Ä¢ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
‚Ä¢ –ú–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∞—Ç—å Terms of Service
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
‚Ä¢ –î–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–µ–≥–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
‚Ä¢ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–π—Ç–µ —Å —Ä–µ–∞–ª—å–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π
            """
            
            keyboard = [
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(help_text, reply_markup=reply_markup)
        
        # –û—Ç–º–µ–Ω–∞
        elif data == "cancel":
            self.user_states.pop(user_id, None)
            await query.edit_message_text(
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
    
    async def _run_simulation_background(self, user_id: int, accounts: list, url: str, chat_id: int, context):
        """–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö"""
        try:
            stats = await self.viewer_simulator.start_mass_simulation(accounts, url, user_id, 300)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            result_text = f"""
‚úÖ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—É—â–µ–Ω–æ: {stats['total']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {stats['success']}
‚Ä¢ –ù–µ—É–¥–∞—á–Ω–æ: {stats['failed']}
‚Ä¢ –û—à–∏–±–æ–∫: {stats['errors']}
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats['duration']}—Å

üåê URL: {url}
            """
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—Ç
            await context.bot.send_message(chat_id=chat_id, text=result_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∏–º—É–ª—è—Ü–∏–∏: {str(e)}"
            await context.bot.send_message(chat_id=chat_id, text=error_text)
    
    async def handle_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        
        if not self.check_authorization(user_id):
            return
        
        user_state = self.user_states.get(user_id)
        text = update.message.text.strip()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å
        if user_state == "waiting_for_account":
            if ":" not in text:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `–ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å`\n"
                    "–ü—Ä–∏–º–µ—Ä: `myuser123:mypassword456`\n\n"
                    "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
                )
                return
            
            try:
                username, password = text.split(":", 1)
                username = username.strip()
                password = password.strip()
                
                if not username or not password:
                    await update.message.reply_text("‚ùå –õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏!")
                    return
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                success = self.account_manager.add_account(username, password)
                
                if success:
                    accounts_count = len(self.account_manager.get_active_accounts())
                    await update.message.reply_text(
                        f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç `{username}` —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                        f"üìä –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {accounts_count}\n\n"
                        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç?",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_account")],
                            [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data="list_accounts")],
                            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                        ])
                    )
                else:
                    await update.message.reply_text(
                        f"‚ùå –ê–∫–∫–∞—É–Ω—Ç `{username}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω."
                    )
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.user_states.pop(user_id, None)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ URL —Å—Ç—Ä–∏–º–∞
        elif user_state == "waiting_for_url":
            stream_url = text
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
            if not stream_url.startswith(('http://', 'https://')):
                await update.message.reply_text("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
            if not self.viewer_simulator._is_safe_url(stream_url):
                await update.message.reply_text(
                    "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω!\n\n"
                    "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¢–û–õ–¨–ö–û —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:\n"
                    "‚Ä¢ –ù–ï Twitch.tv\n"
                    "‚Ä¢ –ù–ï YouTube.com\n"
                    "‚Ä¢ –ù–ï Facebook, Instagram, TikTok\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å URL –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑—Ä–∏—Ç–µ–ª–µ–π
            self.user_states[user_id] = {"state": "selecting_viewers", "url": stream_url}
            
            accounts_count = len(self.account_manager.get_active_accounts())
            max_viewers = min(accounts_count, self.viewer_simulator.max_concurrent)
            
            if accounts_count == 0:
                await update.message.reply_text(
                    "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤!\n"
                    "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /accounts"
                )
                self.user_states.pop(user_id, None)
                return
            
            keyboard = [
                [InlineKeyboardButton(f"üë• –í—Å–µ ({accounts_count})", callback_data=f"viewers_{accounts_count}")],
                [InlineKeyboardButton(f"üéØ –ü–æ–ª–æ–≤–∏–Ω–∞ ({accounts_count//2})", callback_data=f"viewers_{accounts_count//2}")],
                [InlineKeyboardButton(f"üî• –ú–∞–∫—Å–∏–º—É–º ({max_viewers})", callback_data=f"viewers_{max_viewers}")],
                [InlineKeyboardButton("üî¢ –£–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="custom_viewers")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚úÖ URL –ø—Ä–∏–Ω—è—Ç: {stream_url}\n\n"
                f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {accounts_count}\n"
                f"‚ö° –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ: {max_viewers}\n\n"
                f"üë• –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑—Ä–∏—Ç–µ–ª–µ–π:",
                reply_markup=reply_markup
            )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑—Ä–∏—Ç–µ–ª–µ–π
        elif user_state and isinstance(user_state, dict) and user_state.get("state") == "waiting_custom_viewers":
            try:
                viewer_count = int(text)
                accounts_count = len(self.account_manager.get_active_accounts())
                max_viewers = min(accounts_count, self.viewer_simulator.max_concurrent)
                
                if viewer_count <= 0:
                    await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
                    return
                
                if viewer_count > max_viewers:
                    await update.message.reply_text(
                        f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {max_viewers}\n"
                        f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {accounts_count}\n"
                        f"‚ö° –õ–∏–º–∏—Ç —Å–∏—Å—Ç–µ–º—ã: {self.viewer_simulator.max_concurrent}"
                    )
                    return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                user_state["viewer_count"] = viewer_count
                self.user_states[user_id] = user_state
                
                keyboard = [
                    [InlineKeyboardButton("üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨", callback_data="start_simulation")],
                    [InlineKeyboardButton("‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="change_params")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏:\n\n"
                    f"üåê URL: {user_state['url']}\n"
                    f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑—Ä–∏—Ç–µ–ª–µ–π: {viewer_count}\n"
                    f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5 –º–∏–Ω—É—Ç\n\n"
                    f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –≤–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞!",
                    reply_markup=reply_markup
                )
                
            except ValueError:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        
        else:
            await update.message.reply_text(
                "‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –≤–≤–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "/accounts - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏\n"
                "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
                "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"
            )
    
    async def cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        
        if not self.check_authorization(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states.pop(user_id, None)
        
        keyboard = [
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n"
            "–í—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–µ—Ä–≤–∞–Ω—ã.",
            reply_markup=reply_markup
        )

def main():
    """–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"""
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example")
        print("–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª .env:")
        print("TELEGRAM_BOT_TOKEN=your_bot_token_here")
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = EnhancedStreamBot(token)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(CommandHandler("accounts", bot.accounts_command))
    application.add_handler(CommandHandler("simulate", bot.simulate_command))
    application.add_handler(CommandHandler("status", bot.status_command))
    application.add_handler(CommandHandler("cancel", bot.cancel_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(bot.button_handler))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_text_input))
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ Stream Bot v2.0...")
    logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¢–û–õ–¨–ö–û –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º!")
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
    print(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print(f"   /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    print(f"   /accounts - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏")
    print(f"   /simulate - –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏")
    print(f"   /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    print(f"   /cancel - –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")
    print(f"\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()