#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import re
import time
import logging
from typing import Optional, Dict, List, Tuple
from pyrogram.types import Message, InlineKeyboardButton, ReplyKeyboardMarkup

logger = logging.getLogger(__name__)

class BotInterface:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º Telegram –±–æ—Ç–∞"""
    
    @staticmethod
    def parse_task_message(message_text: str) -> Dict[str, str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞–Ω–∏–µ–º –æ—Ç –±–æ—Ç–∞"""
        result = {
            'task_type': None,
            'url': None,
            'reward': None,
            'description': '',
            'time_limit': None
        }
        
        if not message_text:
            return result
        
        text_lower = message_text.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è
        if any(word in text_lower for word in ['—Ä–µ–ø–æ—Å—Ç', 'repost', '–ø–æ–¥–µ–ª–∏—Ç—å—Å—è']):
            result['task_type'] = 'repost'
        elif any(word in text_lower for word in ['–ª–∞–π–∫', 'like', '–Ω—Ä–∞–≤–∏—Ç—Å—è']):
            result['task_type'] = 'like'
        elif any(word in text_lower for word in ['–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', 'comment', '–∫–æ–º–µ–Ω—Ç']):
            result['task_type'] = 'comment'
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL
        url_patterns = [
            r'https://vk\.com/[^\s\)]+',
            r'https://m\.vk\.com/[^\s\)]+',
            r'vk\.com/[^\s\)]+',
            r'https://vkontakte\.ru/[^\s\)]+'
        ]
        
        for pattern in url_patterns:
            match = re.search(pattern, message_text)
            if match:
                url = match.group(0)
                if not url.startswith('http'):
                    url = 'https://' + url
                result['url'] = url
                break
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–∏
        reward_patterns = [
            r'(\d+(?:[.,]\d+)?)\s*(?:—Ä—É–±|‚ÇΩ|—Ä—É–±–ª–µ–π?)',
            r'–æ—Ç\s+(\d+(?:[.,]\d+)?)',
            r'(\d+(?:[.,]\d+)?)\s*—Ä'
        ]
        
        for pattern in reward_patterns:
            match = re.search(pattern, text_lower)
            if match:
                result['reward'] = match.group(1).replace(',', '.')
                break
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        time_patterns = [
            r'(\d+)\s*(?:—Å–µ–∫—É–Ω–¥|—Å–µ–∫)',
            r'(\d+)\s*(?:–º–∏–Ω—É—Ç|–º–∏–Ω)',
            r'–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ\s+–¥–∞–µ—Ç—Å—è\s+(\d+)'
        ]
        
        for pattern in time_patterns:
            match = re.search(pattern, text_lower)
            if match:
                result['time_limit'] = match.group(1)
                break
        
        result['description'] = message_text
        return result
    
    @staticmethod
    def extract_buttons_text(message: Message) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        buttons = []
        
        if hasattr(message, 'reply_markup') and message.reply_markup:
            if hasattr(message.reply_markup, 'inline_keyboard'):
                # Inline –∫–Ω–æ–ø–∫–∏
                for row in message.reply_markup.inline_keyboard:
                    for button in row:
                        if hasattr(button, 'text'):
                            buttons.append(button.text)
            elif hasattr(message.reply_markup, 'keyboard'):
                # Reply –∫–Ω–æ–ø–∫–∏
                for row in message.reply_markup.keyboard:
                    for button in row:
                        if hasattr(button, 'text'):
                            buttons.append(button.text)
        
        return buttons
    
    @staticmethod
    def find_earn_button_text(buttons: List[str]) -> Optional[str]:
        """–ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ '–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å'"""
        earn_keywords = ['–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å', 'earn', 'üí∞', '—Ä–∞–±–æ—Ç–∞', '–∑–∞–¥–∞–Ω–∏—è']
        
        for button_text in buttons:
            text_lower = button_text.lower()
            for keyword in earn_keywords:
                if keyword in text_lower:
                    return button_text
        
        return None
    
    @staticmethod
    def find_get_task_button_text(buttons: List[str]) -> Optional[str]:
        """–ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ'"""
        task_keywords = ['–ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'get task', '–∑–∞–¥–∞–Ω–∏–µ', '–Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ']
        
        for button_text in buttons:
            text_lower = button_text.lower()
            for keyword in task_keywords:
                if keyword in text_lower:
                    return button_text
        
        return None
    
    @staticmethod
    def find_complete_button_text(buttons: List[str]) -> Optional[str]:
        """–ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ '–í—ã–ø–æ–ª–Ω–∏–ª'"""
        complete_keywords = ['–≤—ã–ø–æ–ª–Ω–∏–ª', 'completed', '–≥–æ—Ç–æ–≤–æ', 'done', '—Å–¥–µ–ª–∞–ª']
        
        for button_text in buttons:
            text_lower = button_text.lower()
            for keyword in complete_keywords:
                if keyword in text_lower:
                    return button_text
        
        return None
    
    @staticmethod
    def find_check_button_text(buttons: List[str]) -> Optional[str]:
        """–ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ'"""
        check_keywords = ['–ø—Ä–æ–≤–µ—Ä–∏—Ç—å', 'check', '–ø—Ä–æ–≤–µ—Ä–∫–∞']
        
        for button_text in buttons:
            text_lower = button_text.lower()
            for keyword in check_keywords:
                if keyword in text_lower:
                    return button_text
        
        return None

class VKUrlProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ VK URL"""
    
    @staticmethod
    def normalize_vk_url(url: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è VK URL"""
        if not url:
            return url
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ URL
        if '?' in url:
            url = url.split('?')[0]
        
        # –ó–∞–º–µ–Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–∞ –æ–±—ã—á–Ω—É—é
        url = url.replace('m.vk.com', 'vk.com')
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ https –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if not url.startswith('http'):
            url = 'https://' + url
        
        return url
    
    @staticmethod
    def extract_post_id(url: str) -> Optional[Tuple[str, str]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –ø–æ—Å—Ç–∞ –∏–∑ URL"""
        patterns = [
            r'vk\.com/wall(-?\d+)_(\d+)',
            r'vk\.com/[^/]+\?w=wall(-?\d+)_(\d+)',
            r'vk\.com/.*wall(-?\d+)_(\d+)'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, url)
            if match:
                owner_id = match.group(1)
                post_id = match.group(2)
                return owner_id, post_id
        
        return None
    
    @staticmethod
    def is_valid_vk_url(url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ VK URL"""
        if not url:
            return False
        
        vk_patterns = [
            r'vk\.com/',
            r'vkontakte\.ru/',
            r'm\.vk\.com/'
        ]
        
        return any(re.search(pattern, url) for pattern in vk_patterns)

class TaskValidator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π"""
    
    @staticmethod
    def is_valid_task(task_data: Dict[str, str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏—è"""
        required_fields = ['task_type', 'url']
        
        for field in required_fields:
            if not task_data.get(field):
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è
        valid_types = ['like', 'repost', 'comment']
        if task_data['task_type'] not in valid_types:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
        if not VKUrlProcessor.is_valid_vk_url(task_data['url']):
            return False
        
        return True
    
    @staticmethod
    def estimate_task_complexity(task_data: Dict[str, str]) -> str:
        """–û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏—è"""
        task_type = task_data.get('task_type', '')
        
        complexity_map = {
            'like': 'easy',
            'repost': 'medium',
            'comment': 'hard'
        }
        
        return complexity_map.get(task_type, 'unknown')

class MessageProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞"""
    
    @staticmethod
    async def wait_for_specific_message(client, bot_username: str, 
                                      keywords: List[str], 
                                      timeout: int = 30) -> Optional[Message]:
        """–û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞"""
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            try:
                messages = []
                async for message in client.get_chat_history(bot_username, limit=5):
                    messages.append(message)
                
                for message in messages:
                    if (message.from_user and 
                        message.from_user.username == bot_username and
                        message.text):
                        
                        text_lower = message.text.lower()
                        if any(keyword.lower() in text_lower for keyword in keywords):
                            return message
                
                await asyncio.sleep(1)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await asyncio.sleep(1)
        
        return None
    
    @staticmethod
    def extract_error_info(message_text: str) -> Optional[Dict[str, str]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not message_text:
            return None
        
        text_lower = message_text.lower()
        error_patterns = {
            'insufficient_funds': ['–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', '–Ω–µ—Ç –¥–µ–Ω–µ–≥', 'insufficient funds'],
            'task_expired': ['–∑–∞–¥–∞–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ', '–≤—Ä–µ–º—è –≤—ã—à–ª–æ', 'task expired'],
            'already_completed': ['—É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', 'already completed'],
            'invalid_action': ['–Ω–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', 'invalid action'],
            'rate_limit': ['—Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ', 'rate limit', '–ø–æ–¥–æ–∂–¥–∏—Ç–µ']
        }
        
        for error_type, patterns in error_patterns.items():
            if any(pattern in text_lower for pattern in patterns):
                return {
                    'type': error_type,
                    'message': message_text
                }
        
        return None

class CommentGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    
    @staticmethod
    def generate_comment(post_content: str = "", task_type: str = "comment") -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        positive_comments = [
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! üëç",
            "–ö–ª–∞—Å—Å–Ω–æ! üòä",
            "–°—É–ø–µ—Ä! ‚ú®",
            "–û—Ç–ª–∏—á–Ω–æ! üëå",
            "–ö—Ä—É—Ç–æ! üî•",
            "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! üíØ",
            "–ó–¥–æ—Ä–æ–≤–æ! üéâ",
            "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! ‚ù§Ô∏è",
            "Awesome! üëè",
            "Great! üåü"
        ]
        
        neutral_comments = [
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ—Å—Ç!",
            "–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞",
            "–•–æ—Ä–æ—à–æ –Ω–∞–ø–∏—Å–∞–Ω–æ",
            "–ü–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ",
            "–ê–∫—Ç—É–∞–ª—å–Ω–æ",
            "–ë–ª–∞–≥–æ–¥–∞—Ä—é!",
            "–•–æ—Ä–æ—à–∞—è –ø–æ–¥–∞—á–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"
        ]
        
        import random
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
        if len(post_content) > 100:
            # –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ - –±–æ–ª–µ–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            return random.choice(neutral_comments)
        else:
            # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–æ—Å—Ç–æ–≤ - –±–æ–ª–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ
            return random.choice(positive_comments)
    
    @staticmethod
    def generate_relevant_comment(post_text: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
        if not post_text:
            return CommentGenerator.generate_comment()
        
        text_lower = post_text.lower()
        
        # –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        thematic_comments = {
            '—Å–ø–æ—Ä—Ç': ["–û—Ç–ª–∏—á–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è! üí™", "–°–ø–æ—Ä—Ç - —ç—Ç–æ –∂–∏–∑–Ω—å! üèÉ‚Äç‚ôÇÔ∏è"],
            '–º—É–∑—ã–∫–∞': ["–ö–ª–∞—Å—Å–Ω–∞—è –º—É–∑—ã–∫–∞! üéµ", "–û—Ç–ª–∏—á–Ω—ã–π —Ç—Ä–µ–∫! üéß"],
            '—Ñ–æ—Ç–æ': ["–ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ç–æ! üì∏", "–û—Ç–ª–∏—á–Ω—ã–π –∫–∞–¥—Ä! üëå"],
            '–µ–¥–∞': ["–í—ã–≥–ª—è–¥–∏—Ç –∞–ø–ø–µ—Ç–∏—Ç–Ω–æ! üòã", "–í–∫—É—Å–Ω–æ! üçΩÔ∏è"],
            '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': ["–ö—Ä–∞—Å–∏–≤—ã–µ –º–µ—Å—Ç–∞! ‚úàÔ∏è", "–•–æ—á–µ—Ç—Å—è —Ç—É–¥–∞! üåç"],
            '–Ω–æ–≤–æ—Å—Ç–∏': ["–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏", "–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"],
            '—é–º–æ—Ä': ["–°–º–µ—à–Ω–æ! üòÑ", "–•–æ—Ä–æ—à–∞—è —à—É—Ç–∫–∞! üòÇ"]
        }
        
        for theme, comments in thematic_comments.items():
            if theme in text_lower:
                import random
                return random.choice(comments)
        
        return CommentGenerator.generate_comment(post_text)